;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name ascii-dungeoncrawler.systems.collision, :imports nil, :requires {ascii-dungeoncrawler.constants ascii-dungeoncrawler.constants, ascii-dungeoncrawler.utils ascii-dungeoncrawler.utils, ecs ascii-dungeoncrawler.ecs, ascii-dungeoncrawler.ecs ascii-dungeoncrawler.ecs}, :uses {add-vectors ascii-dungeoncrawler.utils, tile-size ascii-dungeoncrawler.constants}, :defs {update-entity-velocity-if-stopped {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 119, :column 7, :end-line 119, :end-column 40, :arglists (quote ([component-map entity-id stopped?]))}, :name ascii-dungeoncrawler.systems.collision/update-entity-velocity-if-stopped, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 40, :method-params ([component-map entity-id stopped?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 3, :fn-var true, :arglists (quote ([component-map entity-id stopped?]))}, intersect-amounts {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 77, :column 7, :end-line 77, :end-column 24, :arglists (quote ([[x1 y1] [x2 y2]])), :doc "Returns a vector representing the amount that the two rectangles overlap by."}, :name ascii-dungeoncrawler.systems.collision/intersect-amounts, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 24, :method-params ([p__7561 p__7562]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x1 y1] [x2 y2]])), :doc "Returns a vector representing the amount that the two rectangles overlap by."}, mk-update-position-component-data {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 138, :column 7, :end-line 138, :end-column 40, :arglists (quote ([entities-with-position])), :doc "Returns a function that checks if the entity is colliding with any\n  of the other entities in entities-with-position before returning a\n  component map with updated position values."}, :name ascii-dungeoncrawler.systems.collision/mk-update-position-component-data, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 40, :method-params ([entities-with-position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entities-with-position])), :doc "Returns a function that checks if the entity is colliding with any\n  of the other entities in entities-with-position before returning a\n  component map with updated position values."}, moved? {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 47, :column 7, :end-line 47, :end-column 13, :arglists (quote ([pos next-pos]))}, :name ascii-dungeoncrawler.systems.collision/moved?, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 13, :method-params ([pos next-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pos next-pos]))}, between? {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 16, :column 7, :end-line 16, :end-column 15, :arglists (quote ([min value max]))}, :name ascii-dungeoncrawler.systems.collision/between?, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 15, :method-params ([min value max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([min value max]))}, rect-intersects? {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 29, :column 7, :end-line 29, :end-column 23, :arglists (quote ([[left1 top1 right1 bottom1] [left2 top2 right2 bottom2]]))}, :name ascii-dungeoncrawler.systems.collision/rect-intersects?, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 23, :method-params ([p__7518 p__7519]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[left1 top1 right1 bottom1] [left2 top2 right2 bottom2]]))}, order-coords {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 70, :column 7, :end-line 70, :end-column 19, :arglists (quote ([min1 max1 min2 max2]))}, :name ascii-dungeoncrawler.systems.collision/order-coords, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 19, :method-params ([min1 max1 min2 max2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 4, :fn-var true, :arglists (quote ([min1 max1 min2 max2]))}, on-damaged {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 7, :column 7, :end-line 7, :end-column 17, :arglists (quote ([entity1 entity2]))}, :name ascii-dungeoncrawler.systems.collision/on-damaged, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 17, :method-params ([entity1 entity2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entity1 entity2]))}, get-tile-rect {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([x y])), :doc "Returns [x y w h] of a rectangle at [x y] with height and width equal to tile-size."}, :name ascii-dungeoncrawler.systems.collision/get-tile-rect, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 20, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Returns [x y w h] of a rectangle at [x y] with height and width equal to tile-size."}, get-collisions {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 59, :column 7, :end-line 59, :end-column 21, :arglists (quote ([[x y] entities])), :doc "Returns a map of all collisions for the given [x y] coordinates."}, :name ascii-dungeoncrawler.systems.collision/get-collisions, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 21, :method-params ([p__7546 entities]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x y] entities])), :doc "Returns a map of all collisions for the given [x y] coordinates."}, collides? {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 39, :column 7, :end-line 39, :end-column 16, :arglists (quote ([[x1 y1] [x2 y2]]))}, :name ascii-dungeoncrawler.systems.collision/collides?, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 16, :method-params ([p__7524 p__7525]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x1 y1] [x2 y2]]))}, calculate-next-position {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 126, :column 7, :end-line 126, :end-column 30, :arglists (quote ([position next-pos velocity other-entities]))}, :name ascii-dungeoncrawler.systems.collision/calculate-next-position, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 30, :method-params ([position next-pos velocity other-entities]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 4, :fn-var true, :arglists (quote ([position next-pos velocity other-entities]))}, collision-system {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 162, :column 7, :end-line 162, :end-column 23, :arglists (quote ([state])), :doc "Handle collisions between entities, and update positions/velocities appropriately."}, :name ascii-dungeoncrawler.systems.collision/collision-system, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Handle collisions between entities, and update positions/velocities appropriately."}, entity->pos {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([[entity-id [{[x y] :pos}]]])), :doc "Transforms a vector of entity position component data to [x y] form.\n  Data is in the form [:entity-id [{:pos {:x 1 :y 1}}]]"}, :name ascii-dungeoncrawler.systems.collision/entity->pos, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 18, :method-params ([p__7534]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[entity-id [{[x y] :pos}]]])), :doc "Transforms a vector of entity position component data to [x y] form.\n  Data is in the form [:entity-id [{:pos {:x 1 :y 1}}]]"}, on-blocked {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 11, :column 7, :end-line 11, :end-column 17, :arglists (quote ([entity1 entity2]))}, :name ascii-dungeoncrawler.systems.collision/on-blocked, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 17, :method-params ([entity1 entity2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entity1 entity2]))}, adjust-position {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 91, :column 7, :end-line 91, :end-column 22, :arglists (quote ([p1 p2 [vel-x vel-y]])), :doc "Given [x1 y1] and its velocity, returns a new vector [x1' y1'] representing the new position\n  to avoid collision with [x2 y2]. Adjusts the dimension with the smallest intersection amount first."}, :name ascii-dungeoncrawler.systems.collision/adjust-position, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 22, :method-params ([p1 p2 p__7576]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p1 p2 [vel-x vel-y]])), :doc "Given [x1 y1] and its velocity, returns a new vector [x1' y1'] representing the new position\n  to avoid collision with [x2 y2]. Adjusts the dimension with the smallest intersection amount first."}, update-entity-position {:protocol-inline nil, :meta {:file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :line 114, :column 7, :end-line 114, :end-column 29, :arglists (quote ([component-map entity-id position]))}, :name ascii-dungeoncrawler.systems.collision/update-entity-position, :variadic false, :file "/Users/john/.boot/cache/tmp/Users/john/programmingstuff/clojurescript/ascii-dungeoncrawler/237/-rcsl8f/ascii_dungeoncrawler/systems/collision.cljs", :end-column 29, :method-params ([component-map entity-id position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 3, :fn-var true, :arglists (quote ([component-map entity-id position]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:collidable :else :next-pos :pos :components :position :acceleration :velocity}, :order [:pos :else :velocity :next-pos :acceleration :position :collidable :components]}, :doc nil}